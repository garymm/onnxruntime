# calls tools/ci_build/get_docker_image.py

parameters:
- name: Dockerfile
  type: string
- name: Context
  type: string
- name: DockerBuildArgs
  type: string
  default: ""
- name: Repository
  type: string
- name: UseImageCacheContainerRegistry
  type: boolean
  default: true

steps:
- ${{ if eq(parameters.UseImageCacheContainerRegistry, true) }}:
  - template: with-container-registry-steps.yml
    parameters:
      Steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
          addToPath: true
          architecture: 'x64'
        displayName: "Add Python 3.9 to PATH"
      - task: PythonScript@0
        displayName: 'Get ${{ parameters.Repository }} image for ${{ parameters.Dockerfile }}'
        inputs:
          scriptPath: '$(Build.SourcesDirectory)/tools/ci_build/get_docker_image.py'
          arguments: >-
            --dockerfile "${{ parameters.Dockerfile }}" 
            --context "${{ parameters.Context }}" 
            --docker-build-args "${{ parameters.DockerBuildArgs }}" 
            --container-registry onnxruntimebuildcache 
            --repository "${{ parameters.Repository }}"
          workingDirectory: '$(Build.SourcesDirectory)'
      ContainerRegistry: onnxruntimebuildcache
- ${{ if eq(parameters.UseImageCacheContainerRegistry, false) }}:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
      addToPath: true
      architecture: 'x64'
    displayName: "Add Python 3.9 to PATH"

  - task: PythonScript@0
    displayName: "Get ${{ parameters.Repository }} image for ${{ parameters.Dockerfile }}"
    inputs:
      scriptPath: '$(Build.SourcesDirectory)/tools/ci_build/get_docker_image.py'
      arguments: >-
        --dockerfile "${{ parameters.Dockerfile }}"
        --context "${{ parameters.Context }}"
        --docker-build-args "${{ parameters.DockerBuildArgs }}"
        --repository "${{ parameters.Repository }}"
      workingDirectory: '$(Build.SourcesDirectory)'